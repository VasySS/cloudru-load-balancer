// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// BackendServer is an autogenerated mock type for the BackendServer type
type BackendServer struct {
	mock.Mock
}

// GetConnections provides a mock function with no fields
func (_m *BackendServer) GetConnections() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Healthy provides a mock function with no fields
func (_m *BackendServer) Healthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Healthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *BackendServer) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// NewBackendServer creates a new instance of BackendServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackendServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackendServer {
	mock := &BackendServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
