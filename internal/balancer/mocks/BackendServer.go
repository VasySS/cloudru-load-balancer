// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	http "net/http"
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// BackendServer is an autogenerated mock type for the BackendServer type
type BackendServer struct {
	mock.Mock
}

// Address provides a mock function with no fields
func (_m *BackendServer) Address() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// GetConnections provides a mock function with no fields
func (_m *BackendServer) GetConnections() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Healthy provides a mock function with no fields
func (_m *BackendServer) Healthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Healthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServeHTTP provides a mock function with given fields: w, r
func (_m *BackendServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// NewBackendServer creates a new instance of BackendServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackendServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackendServer {
	mock := &BackendServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
